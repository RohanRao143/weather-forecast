// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

interface Quote {
  id: number;
  quote: string;
  author: string;
}

export interface WeatherApiResponse {
  results?: any;
  hourly?: any;
}

// Define a service using a base URL and expected endpoints
export const geocodingApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "https://geocoding-api.open-meteo.com/v1" }),
  reducerPath: "geocodingApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["GeoLocations"],
  endpoints: (build) => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    fetchGeoLocations: build.query<WeatherApiResponse, any>({
      query: (params) => `/search?name=${params.name}&count=3&language=en&format=json`,
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, id) => [{ type: "GeoLocations", id }],
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useFetchGeoLocationsQuery } = geocodingApiSlice;



