// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

interface Quote {
  id: number;
  quote: string;
  author: string;
}

interface WeatherApiResponse {
  quotes: Quote[];
  total: number;
  skip: number;
  limit: number;
  hourly: any;
}

// Define a service using a base URL and expected endpoints
export const weatherApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: "https://api.open-meteo.com/v1" }),
  reducerPath: "weatherApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["Quotes", "Weather"],
  endpoints: (build) => ({
    // Supply generics for the return type (in this case `QuotesApiResponse`)
    // and the expected query argument. If there is no argument, use `void`
    // for the argument type instead.
    fetchForecastWeather: build.query<WeatherApiResponse, any>({
      query: (params) => `/forecast?latitude=${params.latitude}&longitude=${params.longitude}&hourly=temperature_2m&current=is_day,rain,showers,weather_code,apparent_temperature,temperature_2m,precipitation,snowfall,relative_humidity_2m`,
      // `providesTags` determines which 'tag' is attached to the
      // cached data returned by the query.
      providesTags: (result, error, id) => [{ type: "Weather", id }],
    }),
  }),
});


export const fetchWeather = async (params: any) => {
  console.log('Fetch Weather Response:', params);

  const response = await fetch("https://api.open-meteo.com/v1/forecast", {
    method: "GET",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ params }),
  });

  const result: { data: number } = await response.json();

  return result;
};

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useFetchForecastWeatherQuery } = weatherApiSlice;



